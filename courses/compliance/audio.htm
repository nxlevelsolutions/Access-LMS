<!DOCTYPE HTML>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="pragma" content="no-cache" />
    <meta http-equiv="expires" content="-1" />
    <title></title>
    <link rel="stylesheet" type="text/css" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" />
    <link rel="stylesheet" type="text/css" href="css/globals.css" />
    <style>
        body {
            margin: 0px;
            background-image: none;
            background-color: transparent;
        }

        #audio_controls {
            width: 400px;
            height: 45px;
        }

        #audioHtml5, audioFlash {
            display: block;
        }

        #audio_position_slider {
            width: 120px;
            height: 6px;
            background-color: #686868;
            border-radius: 3px;
            position: absolute;
            top: 14px;
            margin-left: 10px;
        }

        @media screen and (max-width: 220px) {
            #audio_position_slider, #timeLeft {
                display: none !important;
            }
            #playPauseBtn{
                margin: 0 auto;
                float:inherit !important;
            }
        }

        @media screen and (min-width: 241px) {
            #Xaudio_position_slider, #XtimeLeft {
                display: block !important;
            }
        }

        #audio_position_handle {
            position: absolute;
            width: 16px;
            height: 16px;
            margin-top: -5px;
            margin-left: -10px;
            cursor: pointer;
        }

        #timeLeft {
            position: absolute;
            top: 11px;
            left: 145px;
            font-size: 11px;
            text-align: center;
            color: #999999;
        }

        div#iframe#subaudio html body div#timeLeft {
            color: #999999;
        }

        #playPauseBtn {
            width: 38px;
            float: right;
            cursor: pointer;
        }

        #icon_playpause {
            padding-bottom: 1px;
            margin: 0 auto;
            background: url("interface/pixel.gif") top center;
            background-repeat: no-repeat;
            width: 26px;
            height: 27px;
        }

        #icon_playpause:hover {
            background-position: center -30px !important;
        }

        #buttonLabel {
            font-size: 11px;
            line-height: 8px;
            color: #999999;
            text-align: center;
          
        }

        /*** Not Currently Used ***/
        #audio_volume_slider {
            width: 45px;
            height: 1px;
            border: 1px solid #9a9a9a;
        }

        #audio_volume_handle {
            position: absolute;
            margin-top: -4px;
            cursor: pointer;
            left: 334px; /*about 50% volume default */
        }
        /*** End Not Currently Used ***/

    </style>
    <script src="https://code.jquery.com/jquery-3.0.0.min.js" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>

    <!--<script type="text/javascript" src="js/jquery-1.7.min.js"></script>
    <script type="text/javascript" src="js/jquery-ui-1.8.16.custom.min.js"></script>
    <script type="text/javascript" src="js/jquery.ui.touch-punch.min.js"></script>-->
    <script type="text/javascript" src="js/utils.js"></script>
    <script type="text/javascript">

        "use strict";
        //http://developer.apple.com/library/safari/#documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/ControllingMediaWithJavaScript/ControllingMediaWithJavaScript.html
        var hasNativeAudio,
            errorDescription = {
                errorCode: function (code) {
                    var des = ["N/A", "MEDIA_ERR_ABORTED", "MEDIA_ERR_NETWORK", "MEDIA_ERR_DECODE", "MEDIA_ERR_SRC_NOT_SUPPORTED"]
                    return des[code];
                },
                networkCode: function (code) {
                    var des = ["NETWORK_EMPTY", "NETWORK_IDLE", "NETWORK_LOADING", "NETWORK_LOADED", "NETWORK_NO_SOURCE"]
                    return des[code];
                },
                readyStateCode: function (code) {
                    var des = ["HAVE_NOTHING", "HAVE_METADATA", "HAVE_CURRENT_DATA", "HAVE_FUTURE_DATA", "HAVE_ENOUGH_DATA"]
                    return des[code];
                }
            },
            pageLoaded = false,
            audioPlayer,
            audiofile,
            NEXT_ATTEMPT_WAIT = 100,
            audioEndedEventFired,
            userSelectedAudio,
            isDragging = false,
            initialized = false,
            deferred = { func: undefined, param: undefined },
            loading = false,
            labelPlayBtn,
            currentTime,
            labelPauseBtn;

        try {
            hasNativeAudio = (new Audio()) != undefined;
            //firefox doesn't handle mp3's under its audio control
        }
        catch (e) {
            hasNativeAudio = false
        }
        console.log("AUDIO: hasNativeAudio = " + hasNativeAudio);

        function onPageLoad() {
            pageLoaded = true;
        }
        function audioError(errMessage) {
            if (hasNativeAudio && parent.nav != undefined) {
                //codes reference:
                //http://developer.apple.com/library/safari/#documentation/AudioVideo/Reference/HTMLMediaElementClassReference/HTMLMediaElement/HTMLMediaElement.html#//apple_ref/javascript/cl/HTMLMediaElement
                var str = "Audio status codes: error(" + (audioPlayer.error == null ? null : audioPlayer.error.code) + ")=" + errorDescription.errorCode((audioPlayer.error == null ? 0 : audioPlayer.error.code))
                    + ", networkState(" + audioPlayer.networkState + ")=" + errorDescription.networkCode(audioPlayer.networkState)
                    + ", readyState(" + audioPlayer.readyState + ")=" + errorDescription.readyStateCode(audioPlayer.readyState)
                    + ", paused=" + audioPlayer.paused
                    + ", ended=" + audioPlayer.ended
                    + ", duration=" + audioPlayer.duration
                    + ", filename=" + audiofile
                    + ", frame=" + window.name;
                parent.nav.writeToLog(str);
            }
            if (!hasNativeAudio && parent.nav != undefined) {
                parent.nav.writeToLog("audioPlayer.swf: " + errMessage);
            }
        }
        function audioEnded() {
            $('#audio_position_handle').draggable('enable');
            displayPauseIcon(false);
            if (parent.nav != undefined) parent.nav.eventCompleted("audio");
            //parent.nav.writeToLog("Audio: audio ended.", true);
            if (!audioEndedEventFired) { //make sure only happens once
                audioEndedEventFired = true;
                fireAudioEvent("audioEnded", null); //this function may die abruptly in IE8. it must be last
            }
        }
        function onAllowToNavigate(nav) { //enable next when gated
        }
        function flashInitialized() { //this function is called by flash once the 1st frame has loaded
            if (parent.nav != undefined) parent.nav.writeToLog("audioPlayer: flash initialized.");
            init();
        }

        function onUpdateUI(nav) {
            var audioFile = nav.getPage().sound;
            labelPlayBtn = parent.nav.settings.labelPlay || "Play";
            labelPauseBtn = parent.nav.settings.labelPause || "Pause";
            if (parent.name == "subCourse") {
                labelPlayBtn = parent.parent.nav.settings.labelPlay || "Play";
                labelPauseBtn = parent.parent.nav.settings.labelPause || "Pause";
            }
            if (userSelectedAudio == undefined) userSelectedAudio = function () {
                var ret = true;
                if (parent.userSelectedAudio == undefined) {
                    if (parent.parent.userSelectedAudio != undefined) {
                        ret = parent.parent.userSelectedAudio;
                    }
                } else {
                    ret = parent.userSelectedAudio;
                }
                return ret;
            }();

            if (initialized) {
                //ready to go.. play
                if (audioFile) {
                    if (nav.settings.gated && !nav.getPage().completed) {
                        $('#audio_position_handle').draggable('disable');
                    } 
                    else {
                        $('#audio_position_handle').draggable('enable'); //set draggable scrubber
                    }
                    playMP3File(audioFile);
                }
                else{
                    $('#audio_position_handle').draggable('disable');
                }
                $('#icon_playpause').attr('title', labelPauseBtn);
                $('#buttonLabel').html(labelPauseBtn);
            } else {
                if (userSelectedAudio) {
                    if (hasNativeAudio) {
                        init();
                        if (audioFile) playMP3File(audioFile); //skip if not set
                    } 
                    else {
                        //deferred.func = playMP3File;
                        //deferred.param = audioFile;
                        if (audioFile == undefined || audioFile.length == 0) {
                            hideControls(true);
                            nav.eventCompleted("audio");
                        } else {
                            deferred.func = playMP3File;
                            deferred.param = audioFile;
                        }
                    }
                } else {
                    // Learner chose no audio
                    parent.nav.eventCompleted("audio");
                }
            }
        }

        //**********************************************
        // event-related methods
        // TO DO: it can only handle 1 listener
        //**********************************************
        //var evtListeners = new Array();

        var evtListener;
        function addAudioEventListener(doc) {
            //called from parent
            evtListener = doc;
        }
        function fireAudioEvent(name, value) {
            if (evtListener == undefined) return;
            var functionName;
            switch (name) {
                case "currentTime":
                    functionName = "onAudioCurrentTime";
                    break;
                case "audioEnded":
                    functionName = "onAudioEnded";
                    break;
                default:
                    return;
            }
            //call method
            if (typeof (evtListener[functionName]) == "function") {
                //call must be asynchronous
                setTimeout(function () {
                    if (typeof (evtListener[functionName]) != "undefined") evtListener[functionName](value);
                }, 100);
            }
            else {
                //parent.nav.writeToLog("Audio warning: function " + functionName + " not found in listener.");
            }
        }
        function loadedMetadata() {
            if (isNaN(audioPlayer.duration)) {
                $('#waiting').show();
                setTimeout(function () {
                    playMP3File(audiofile)
                }, NEXT_ATTEMPT_WAIT);
            }
            else {
                $('#waiting').hide();
                var p = audioPlayer.play();
                if (p !== undefined) {
                    p.then(function (res) {
                        // autoplay Ok
                    }).catch(function (err) {
						// autoplay was blocked.
						displayPauseIcon(false);
						parent.nav.writeToLog("Audio: " + err.message, true);
						if (parent.showAudioReminder) {
							parent.showAudioReminder();
						}
						else{
							if (parent.parent.showAudioReminder) 
								parent.parent.showAudioReminder();
							else
								parent.nav.writeToLog("Audio: unable to display audio reminder message", true);
						}
                    });
                }
            }
        }
        function playMP3File(file) {
            if (userSelectedAudio == false) return;
            audioEndedEventFired = false;
            audiofile = file;
            if (parent.nav != undefined) {
                parent.nav.writeToLog("Audio: page audio=\"" + file + "\" (native=" + hasNativeAudio + ") in frame " + window.name);
            }
            if (file == undefined || file.length == 0) {
                //$("#audio_position_handle").draggable('disable');
                hideControls(true);
                displayPauseIcon(false);
                if (hasNativeAudio) { //webkit
                    if (!isNaN(audioPlayer.duration)) {
                        audioPlayer.pause(); //required to stop the audio
                        audioPlayer.src = "";
                        audioPlayer.load();
                    }
                } else { //flash
                    if (audioPlayer != undefined) audioPlayer.audioPause();
                    audioPlayer.loadFile("");
                }
                parent.nav.eventCompleted("audio");
                var s = document.getElementById("audio_position_handle");
                //if (positionSliderLeft == 0 || positionSliderLeft == undefined) init(); //getAbsoluteX will not execute properly on onload+hidden
                s.style.left = (positionSliderLeft - positionHandleOffset) + "px";
            }
            else {
                hideControls(false);
                //$("#audio_position_handle").draggable('enable')
                if (hasNativeAudio) {
                    audioPlayer.src = file;
                    displayPauseIcon(true);
                    if (Utilities.isiPad) {
                        audioPlayer.load();
                    }
                    loading = true;
                }
                else {
                    if (positionSliderLeft == 0 || positionSliderLeft == undefined) init(); //getAbsoluteX will not execute properly on onload+hidden
                    if (initialized) {
                        var state;
                        try {
                            state = audioPlayer.getPlayingState();
                        }
                        catch (e) {
                            //firefox needs more time.. sometimes
                            setTimeout(function () {
                                playMP3File(file);
                            }, 500); //wait half a second
                            return;
                        }
                        if (state == 'noaudio') {
                            parent.nav.writeToLog("Audio: flash is unable to play audio in this computer");
                            hideControls(true);
                            $('#icon_playpause').css('background', 'url(interface/pixel.gif)');
                            loading = false;
                            parent.nav.eventCompleted("audio");
                            return; //skip loading.gif
                        } else {
                            loading = true;
                            audioPlayer.loadFile(file);
                        }
                    } else { //wait for flash to initialize properly
                        deferred.func = playMP3File;
                        deferred.param = file;
                        loading = true;
                    }
                }
                $('#icon_playpause').css('background', 'url(interface/audio_loading.gif)');
            }
        }

        function showError() {
            if (hasNativeAudio) {
                alert(audioPlayer.readyState + ":" + audioPlayer.networkState + ":" + ((audioPlayer.error == null) ? "null" : audioPlayer.error.code));
            } else {
                //alert(audioPlayer.getState() + ":" + audioPlayer.obj.IsPlaying() + ":" + audioPlayer.obj.PercentLoaded() + ":" + audioPlayer.obj.TotalFrames() + ":" + audioPlayer.obj.TCurrentFrame());
                //audioPlayer.obj.TCurrentFrame()
                //alert(audioPlayer.obj.readyState);
                //alert(audioPlayer.getState() + ":" + audioPlayer.obj.IsPlaying() + ":" + audioPlayer.obj.TotalFrames + ":" + audioPlayer.obj.TCurrentFrame("/") 			);
            }
        }
        var volumeSliderLeft,
            volumeSliderWidth,
            positionSliderLeft,
            positionSliderWidth,
            positionHandleOffset;
        function init() {
            //this initialization must be done after the iframe has become visible
            //if (initialized) return;
            //volumeSliderLeft = $("#audio_volume_slider").offset().left;
            positionSliderLeft = $("#audio_position_slider").offset().left;
            //volumeSliderWidth 	= $("#audio_volume_slider").width();
            positionSliderWidth = $("#audio_position_slider").width();
            positionHandleOffset = $("#audio_position_handle").width() / 2;
            //$("#audio_volume_handle" ).draggable({axis: 'x', containment: "parent", drag: onSetVolume}); //set draggable volume handle
            if (hasNativeAudio) {
                //http://www.chipwreck.de/blog/2010/03/01/html-5-video-dom-attributes-and-events/
                audioPlayer = document.getElementById("audioHtml5");
                audioPlayer.autoplay = true;
                audioPlayer.volume = 0.5; //50% volume default
                audioPlayer.preload = "metadata";
                audioPlayer.addEventListener("ended", audioEnded, false); //required even though it's already set in tag.. buggy behaviour
                //audioPlayer.addEventListener("timeupdate", updatePositionSlider, false);
                //audioPlayer.addEventListener("error", audioError, true);
            }
            else {
                audioPlayer = Utilities.getFlashMovieObject('audioFlash');
                audioPlayer.registerEvent('onPercentage', 'updateFlashPercentage');
                audioPlayer.registerEvent('onSongOver', 'audioEnded');
                audioPlayer.registerEvent('onError', 'audioError');
                audioPlayer.setVolume(50); //50% volume default
            }
            // handle scrubber
            $("#audio_position_handle").draggable({
                axis: 'x',
                containment: "parent",
                drag: onSetAudioPosition,
                start: function () {
                    isDragging = true;
                },
                stop: function () {
                    isDragging = false;
                    fireAudioEvent("currentTime", currentTime);
                }
            });
            if (parent.nav && parent.nav.settings.gated && !parent.nav.getPage().completed) {
                $("#audio_position_handle").draggable('disable');
            }
            else {
                $("#audio_position_handle").draggable('enable'); //set draggable scrubber
            }
            initialized = true;
            if (typeof (deferred.func) == "function" && deferred.param != undefined) {
                deferred.func(deferred.param);
            }
        }
        /*
                function onSetVolume(event, ui){
                    var ratio = (ui.position.left - volumeSliderLeft)/volumeSliderWidth;
                    if (hasNativeAudio){
                        audioPlayer.volume = ratio;
                    }
                    else{
                        audioPlayer.setVolume(Math.round(ratio * 100));
                    }
                }
        */
        function onSetAudioPosition(event, ui) {
            var ratio = (ui.position.left - positionSliderLeft) / positionSliderWidth;
            if (hasNativeAudio) {
                audioPlayer.currentTime = ratio * audioPlayer.duration;
                displayPauseIcon(true);
                audioPlayer.play();// ?
            }
            else {
                audioPlayer.setPosition(Math.round(ratio * 100));
            }
        }
        function updateFlashPercentage(p) {
            //called by the flash player as the audio head moves
            //playing the audio. (integer percentage )
            if (isNaN(p)) return;
            updatePositionSlider(p / 100);
        }
        function updateTimeLeft() {
            var secsLeft,
                str = "";
            if (hasNativeAudio) {
                secsLeft = audioPlayer.duration - audioPlayer.currentTime;
            } else {
                secsLeft = audioPlayer.getDuration() - audioPlayer.getPosition();
            }
            if (!isNaN(secsLeft)) {
                secsLeft = Math.abs(secsLeft);
                var minutes = parseInt(secsLeft / 60) % 60,
                    seconds = Math.round(secsLeft % 60);
                str = (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds);
            }
            $("#timeLeft").html(str);
        }
        function updatePositionSlider(r) {
            if (loading) {
                loading = false;
                $('#icon_playpause').css('background', 'url(interface/audio_pause.png)');
                $('#icon_playpause').attr('title', labelPauseBtn);
            }
            var audioRatio,
                currentTime;
            updateTimeLeft();
            if (hasNativeAudio) { //webkit, etc
                audioRatio = audioPlayer.currentTime / audioPlayer.duration;
                currentTime = audioPlayer.currentTime;
            }
            else {
                audioRatio = r; //flash returns a percetage ratio
                currentTime = audioPlayer.getPosition(); //in seconds
            }
            if (!isDragging) {
                fireAudioEvent("currentTime", currentTime);
            }


            if (isNaN(audioRatio) || isDragging) {
                return;
            }
            var s = document.getElementById("audio_position_handle");
            s.style.left = positionSliderLeft + Math.round((positionSliderWidth * audioRatio) - positionHandleOffset) + "px";
        }
        /*
                    function toggleMute(){
                    if (audioPlayer.muted){
                        audioPlayer.muted = false;
                        document.getElementById("icon_speaker").src = "interface/audio_on.gif";
                    }
                    else{
                        audioPlayer.muted = true;
                        document.getElementById("icon_speaker").src = "interface/audio_off.gif";
                    }
                }
        */
        function togglePlayPause() {
            //called by user when play/pause button is pressed
            if (hasNativeAudio) {
                if (audioPlayer.paused || audioPlayer.ended) {
                    parent.nav.writeToLog("play() toggle");
                    if (parent.window.frames["main"] && parent.window.frames["main"].mp3Player) parent.window.frames["main"].mp3Player.stop();
                    if (typeof parent.pauseMedia === "function") parent.pauseMedia(); // Pause other media like video - Finish solution
                    audioPlayer.play();
                    displayPauseIcon(true);
                }
                else {
                    parent.nav.writeToLog("pause() toggle");
                    audioPlayer.pause();
                    displayPauseIcon(false);
                }
            }
            else {
                //audioPlayer.playToggle();
                if (audioPlayer.getPlayingState() == 'playing') {
                    audioPlayer.audioPause();
                    displayPauseIcon(false);
                } else { //it's paused, don't show pause icon
                    if (parent.window.frames["main"] && parent.window.frames["main"].mp3Player) parent.window.frames["main"].mp3Player.stop();
                    if (typeof parent.pauseMedia === "function") parent.pauseMedia(); // Pause other media like video - Finish solution
                    audioPlayer.audioPlay();
                    displayPauseIcon(true);
                }
            }
        }
        function displayPauseIcon(flag) {
            if (flag === true) {
                $('#icon_playpause').attr('title', labelPauseBtn);
                $('#buttonLabel').html(labelPauseBtn);
                $('#icon_playpause').css('background', 'url(interface/audio_pause.png)');
            } else {
                $('#icon_playpause').attr('title', labelPlayBtn);
                $('#buttonLabel').html(labelPlayBtn);
                $('#icon_playpause').css('background', 'url(interface/audio_play.png)');
            }
        }
        function audioPlay() { //called by parent
            //play only if paused and audio has not ended
            //console.log(window.parent.name + " = > "+audioPlayer.paused+":"+audioPlayer.ended+":"+audioPlayer.duration+":"+audioPlayer.currentTime + ":> " + audioEndedEventFired);
            if (userSelectedAudio == true) {
                displayPauseIcon(true);
                if (hasNativeAudio) {
                    //audioPlayer.ended==false is buggy in the iPad
                    if (audioPlayer.paused == true && !audioEndedEventFired) {
                        if (parent.window.frames["main"] && parent.window.frames["main"].mp3Player) parent.window.frames["main"].mp3Player.stop();
                        audioPlayer.play();
                    }
                } else {
                    if (audioPlayer.getPlayingState() == "paused") {
                        if (parent.window.frames["main"] && parent.window.frames["main"].mp3Player) parent.window.frames["main"].mp3Player.stop();
                        audioPlayer.audioPlay();
                    }
                }
            }
        }
        function audioPause() {//called by parent
            if (userSelectedAudio) {
                parent.nav.writeToLog("Audio: pausing invoked in html frame=\"" + window.name + "\"");
                displayPauseIcon(false);
                if (hasNativeAudio) {
                    audioPlayer.pause();
                } else {
                    if (audioPlayer.getPlayingState() == 'playing') audioPlayer.audioPause();
                }
            }
        }
        function hideControls(flag) {
            if (flag) {
                $('#playPauseBtn').hide();
                $('#audio_position_slider').hide();
                $('#timeLeft').hide();
            } else {
                $('#playPauseBtn').show();
                $('#audio_position_slider').show();
                if ($('body').width() >= 230)
                    $('#timeLeft').show();

            }
        }
        window.onbeforeunload = function () {
            //IE bug fix to Flash function
            this.__flash__removeCallback = function (instance, name) {
                if (instance == null) return;
                instance[name] = null;
            }
        }
    </script>

</head>
<body onload="javascript:onPageLoad();">
	<div id="playPauseBtn" onclick="javascript:togglePlayPause()">
        <div id="icon_playpause"></div>
        <div id="buttonLabel"></div>
	</div>
	<div id="audio_position_slider">
		<img src="interface/audio_handle.png" alt="" name="audio_position_handle" id="audio_position_handle" />
	</div>
	<audio id="audioHtml5" name="audio" preload="metadata" onerror="audioError()" onLoadedMetadata="loadedMetadata()" onEnded="audioEnded()" onTimeUpdate="updatePositionSlider()" type="audio/mpeg"></audio>
	<img id="waiting" alt="" style="position:absolute; left: 208px; top: 8px; display:none;" src="interface/waitanimation.gif" width="30" height="30" />
	<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" id="audioFlash" width="1" height="1" style="position:absolute;left:-1px;">
		<param name="movie" value="flash/audioPlayer.swf">
		<param name="quality" value="high">
		<param name="play" value="false">
		<param name="bgcolor" value="#FFFFFF">
		<embed play="false" swliveconnect="true" name="audioFlash" src="flash/audioPlayer.swf" quality="high" bgcolor="#FFFFFF" width="1" height="1" type="application/x-shockwave-flash"></embed>
	</object >
	<div id="timeLeft"></div>
</body>
</html>