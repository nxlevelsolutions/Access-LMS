<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <style type="text/css">
        body {
            margin: 0px;
            background-color: transparent;
            font-family: Consolas,Lucida Console,Courier New;
            font-size: 10px;
        }

        #promptBox {
            position: absolute;
            width: 600px;
            top: 20px;
        }

            #promptBox img {
                position: absolute;
                right: 0px;
                margin: -5px -5px 0px 0px;
                cursor: pointer;
            }

        #header {
            height: 17px;
            font-size: 14px;
            padding-left: 10px;
            background-color: #70b4e8;
            box-shadow: 2px 4px 5px 1px rgba(0, 0, 0, .20);
            -webkit-box-shadow: 2px 4px 5px 1px rgba(0, 0, 0, .20);
        }

        #controls {
            height: 100% !important;
            font-size: 12px;
            background-color: rgb(235, 235, 235);
            height: auto !important;
            border-right: 1px solid #979797;
            border-bottom: 1px solid #979797;
            border-left: 1px solid #979797;
            -webkit-background-clip: padding-box;
            box-shadow: 2px 4px 5px 1px rgba(0, 0, 0, .20);
            -webkit-box-shadow: 2px 4px 5px 1px rgba(0, 0, 0, .20);
            padding: 8px;
            margin-bottom: 8px;
        }

        #txtLog {
            background-color: white;
            border: 1px solid gray;
            width: 455px;
            height: 185px;
            overflow: auto;
        }

        select {
            font-family: Consolas,Lucida Console,Courier New;
        }

        #pageHeader {
            height: 15px;
        }

        #entryEditor {
            display: none;
            position: absolute;
            left: 8px;
            top: 60px;
            font-family: Consolas,Lucida Console,Courier New;
            font-size: 12px;
            background-color: rgb(235, 235, 235);
            width: 585px;
            height: 225px;
            padding-top: 4px;
        }

        input, select {
            font-family: Consolas,Lucida Console,Courier New;
            font-size: 12px;
        }

        #comments {
            width: 575px;
            height: 148px;
        }

        #txtLog span {
            cursor: pointer;
        }

        #closeButton {
            cursor: pointer;
            position: absolute;
            right: 0px;
            background-color: rgb(255, 95, 95);
            width: 18px;
            text-align: center;
            height: 15px;
            font-size: 14px;
            font-weight: bolder;
            color: white;
            border: 1px solid rgb(165, 165, 165);
        }

        #wait {
            display: none;
            position: absolute;
            left: 560px;
            top: 30px;
        }

        #ver {
            color: gray;
            right: 30px;
            position: absolute;
        }
    </style>
    <!--<script language="javascript" src="js/jquery-1.7.min.js"></script>
    <script language="javascript" src="js/jquery-ui-1.8.16.custom.min.js"></script>-->
    <script src="https://code.jquery.com/jquery-3.0.0.min.js" crossorigin="anonymous"></script>
    <script language="javascript" src="js/utils.js"></script>
    <script language="javascript">

        // BASECAMP API: -------------------------------------------
        // https://github.com/37signals/bcx-api/tree/master/sections
        // ---------------------------------------------------------
        var pageLoaded = false,
            todoId = "",
            displayId,
            projectId,
            pageIdDisp,
            nav,
            listLoaded = false,
            disabled = false,
            projectId,
            listId,
            userEmail,
            userPwd;
        //$(document).on("ready", function () {
        //});

        function onAllowToNavigate(nav) {
            //enable next when gated
        }

        function onUpdateUI(nav) {
            var optionsStr = "";
            this.nav = nav;

            //parent.$("#frameLogger").draggable();

            //load page id's
            if (!listLoaded) {
                var allPages = nav.allPages;
                for (var i = 0; i < allPages.length; i++) {
                    optionsStr += '<option value="' + allPages[i].id + '">' + allPages[i].id + '</option>';
                }
                $('#pageIDs').append(optionsStr);
                listLoaded = true;
            }
            pageIDs.value = nav.getPage().id;

            //get settings
            projectId = nav.settings.bcProjectId;
            listId = nav.settings.bcListId;
            userEmail = nav.settings.bcUserId;
            userPwd = nav.settings.bcPwd;

            if (projectId == undefined || projectId.length == 0) {
                $("#statusText").html("<font color='#FF0000'><b>Error:Missing 'bcProjectId' (Basecampe Project ID) key in settings. Unable to log.</b></font>");
                disabled = true;
                return;
            }
            //load entries if enough data is avail
            if (listId == undefined || listId.length == 0) {
                $("#statusText").html("<font color='#FF0000'><b>Error: Missing 'bcListId' (Basecampe List ID) key in settings. Unable to log.</b></font>");
                disabled = true;
                return;
            }

            if (nav.settings.loggerEnabled != undefined) {
                disabled = !nav.settings.loggerEnabled;
            }

            if (Utilities.isiPad) {
                if (parent.$("#btnLogger").length == 0 && !disabled) {
                    parent.$(parent.document.body).append("<input id='btnLogger' type='button' class='button' value='VIEW LOGGER' />");
                    var btn = parent.$("#btnLogger");
                    btn.css("position", "absolute");
                    btn.css("margin", "5px");
                    btn.css("opacity", ".5");
                    btn.css("width", "120px");
                    btn.css("height", "40px");
                    btn.css("font-weight", "bolder");
                    btn.click(function () {
                        refresh();
                        parent.$("#frameLogger").fadeIn();
                    });
                }
            }

            refresh();
        }

        function refresh() {
            if (disabled || userEmail == undefined || userPwd == undefined) return;
            $("#wait").show();
            $.support.cors = true;
            $.ajax({
                url: "basecampProxy.asp",
                dataType: 'json',
                async: true,
                type: 'post',
                data: { command: 'getToDos', projectId: projectId, listId: listId, userEmail: userEmail, userPwd: userPwd },
                success: function (res) {
                    //closedTodos = res.todos.completed;
                    if (res == null) {
                        $("#txtLog").html("Error loading list. Make sure the Project and List IDs are correct in settings.xml.");
                    }
                    else {
                        displayPageTodos(res.todos.remaining);
                    }
                    $("#wait").hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    $("#wait").hide();
                    if (xhr.responseText.trim() == "HTTP Basic: Access denied.") {
                        parent.nav.writeToLog("Logger_basecamp: Access denied/Authentication Error. Check credentials.", true);
                        $("#txtLog").html("Logger_basecamp: Authentication Error");
                        $("#statusText").html("Logger_basecamp: Authentication Error");
                    }
                    else if (xhr.responseText.startsWith("<%@")) {
                        parent.nav.writeToLog("Logger_basecamp: Server error=Does not appear to be IIS", true);
                        $("#txtLog").html("Logger_basecamp: Server error=Does not appear to be IIS");
                        $("#statusText").html("Logger_basecamp: Server error=Does not appear to be IIS");
                    }
                    else {
                        parent.nav.writeToLog("Logger_basecamp: loading getToDos error " + xhr.status + ": " + thrownError, true);
                        $("#txtLog").html("Error loading list. Make sure settings.xml has been properly set.");
                        $("#statusText").html(thrownError.toString());
                    }
                }
            });
        }

        function displayPageTodos(openTodos) {
            $("#wait").show();
            var pageTitle = this.nav.getPage().title;

            displayId = this.nav.getPage().id;
            pageIDs.value = displayId;

            $("#entryEditor").hide();

            if (pageTitle.length > 35) pageTitle = pageTitle.substr(0, 35) + "...";
            $("#pageHeader").html("<b>Title</b>:" + pageTitle + " <b>Screen ID</b>:" + displayId);

            //load data from the server
            $("#txtLog").html("");
            $("#statusText").html("Loading log entries...");

            //get entries for this pageId
            var todo,
                editLink = "",
                str = "",
                count = 0;
            pageIdDisp = "[" + displayId + "]"
            for (var i = 0; i < openTodos.length; i++) {
                todo = openTodos[i];
                if (todo.content.toLowerCase().indexOf(pageIdDisp.toLowerCase()) == 0) {
                    count++;
                    var dt = new Date(todo.created_at);
                    if (isNaN(dt)) {
                        dt = new Date(todo.created_at.replace(/\-/ig, '/').split('.')[0]);
                    }
                    editLink = "<span id='edit" + i + "'><font color='#0000FF'><b><u>EDIT</u></b></font></span>";
                    str = "<b>Created:</b>" + dt.toLocaleString() + "<br/>"
                        + editLink + ":" + todo.content.substr(pageIdDisp.length) + " "
                        + "<br/><br/>";
                    $("#txtLog").append(str);
                    document.getElementById("edit" + i).onclick = function () {
                        editEntry(this);
                    }
                    $("#edit" + i).data("todo", todo);
                }
            }
            $("#wait").hide();
            $("#statusText").html(count + " log entries found for this page.");
        }

        function editEntry(linkObj) {
            if (linkObj == null) {//new entry
                this.todoId = undefined;
                document.getElementById("comments").value = "";
            }
            else { //edit clicked item
                var todo = $(linkObj).data("todo");
                this.todoId = todo.id;
                document.getElementById("comments").value = $.trim(todo.content.substr(pageIdDisp.length));
            }
            $("#entryEditor").show();
            $("#comments").focus();
        }

        function closePrompt(closeBox) {
            $("#entryEditor").hide();
            parent.$("#frameLogger").hide();
        }
        function onPageLoad() {
            pageLoaded = true;
        }

        function closeNewComment() {
            $("#entryEditor").hide();
        }

        function saveEntry() {
            $("#wait").show();
            btnSave.disabled = true;
            $("#statusText").html("Saving ...");
            var comments = document.getElementById("comments").value,
                pageXDisp = "Page " + (nav.getPage().index + 1) + ": ",
                command,
                data;
            comments = comments.replace(/"/g, '\\"');
            comments = comments.replace(/\n/g, '\\n');
            comments = comments.replace(/\r/g, '\\r');
            if (todoId == undefined || todoId.length == 0) {
                //it's a new entry, add a couple of required items
                command = "newTodo";
                data = pageIdDisp + " " + pageXDisp + comments;
            }
            else {
                //it's an update to an existing entry
                if (comments.substring(0, pageXDisp.length) == pageXDisp) pageXDisp = "";
                data = pageIdDisp + " " + pageXDisp + comments;
                command = "updateTodo";
            }
            $.ajax({
                url: "basecampProxy.asp",
                dataType: 'json',
                async: false,
                type: 'post',
                data: { command: command, data: data, projectId: projectId, listId: listId, todoId: todoId, userEmail: userEmail, userPwd: userPwd },
                success: function (res) {
                    btnSave.disabled = false;
                    refresh();
                    $("#entryEditor").hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    $("#statusText").html("<font color='#FF0000'><b>Error:" + xhr.status + ": " + thrownError + "</b></font>");
                    parent.nav.writeToLog("Logger: loading getToDos error " + xhr.status + ": " + thrownError, true);
                }
            });
        }
        function pageIDSelectionChange() {
            parent.nav.gotoPage(pageIDs.value);
        }
        function onCommentsKeyDown() {
            window.event.cancelBubble = true;
        }
    </script>
</head>
<body onload="javascript:onPageLoad()">
    <div id="promptBox">
        <div id="closeButton" onclick="closePrompt(true);">X</div>
        <div id="header">Module Review Log <span id="ver">ver 1.2</span></div>
        <div id="controls">
            <div id="pageHeader"></div>
            <img id="wait" src="interface/waitanimation.gif" width="30" height="30" />
            <div style="height:26px;">Go to page:<select id="pageIDs" onchange="pageIDSelectionChange()"></select></div>
            <table border="0" cellpadding="0" cellspacing="0" width="100%">
                <tr>
                    <td>
                        <div id="txtLog"></div>
                    </td>
                    <td align="center" valign="top">
                        <input id="btnNewComment" type="button" value="New Comment" onclick="editEntry()" />
                    </td>
                </tr>
            </table>
            <div id="statusText"></div>
        </div>
    </div>
    <div id="entryEditor">
        Comments:
        <table border="0" cellpadding="0" cellspacing="0" width="100%">
            <tr>
                <td width="33%" nowrap align="left"></td>
                <td width="33%" nowrap align="center"></td>
                <td width="33%" nowrap align="right"></td>
            </tr>
        </table>
        <textarea id="comments" cols="20" rows="4" onkeydown="onCommentsKeyDown()"></textarea><br />
        <input id="btnSave" type="button" value="Save" onclick="saveEntry()" /><input id="btnClose" type="button" value="Cancel" onclick="closeNewComment()" />
    </div>
</body>
</html>
