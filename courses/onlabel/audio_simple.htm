<!DOCTYPE HTML>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="cache-control" content="no-cache, no-store, must-revalidate" />
	<meta http-equiv="pragma" content="no-cache" />
	<meta http-equiv="expires" content="-1" />
	<title></title>
	<link rel="stylesheet" type="text/css" media="screen" href="css/globals.css" />
	<style>
		body {
			margin:0px; 
			background-color:transparent;
		}
		#audioHtml5, object{
			display:block;
	    	width:1px;
	    	height:1px;
		    position:absolute;
    		top:0px;
		    left:-1px;
		}
		img {
			display: block
		}
		#timeLeft {
			position: absolute;
			top: 11px;
			left: 194px;
			font-size: 11px;
			text-align: center;
			color: #999999;
		}
		div#iframe#subaudio html body div#timeLeft {
			color: #999999;
		}
		
		#playPauseBtn {
			width:38px;
			float:left;
		}

		#icon_playpause {
		    cursor:pointer;
			background:url("interface/pixel.gif") top center;
			background-repeat:no-repeat;
			width:26px;
			height:26px;
		}
		#icon_playpause:hover {
			background-position: center -30px!important;
		}
		#buttonLabel {
			font-size:9px;
			color:#999999;
			text-align:center;
			cursor:pointer;
			position:absolute;
			width:38px;
			bottom: 0;
		    height: 10px;
    		position: absolute;
		    width: 38px;
		}

	</style>
	<script language="javascript" src="js/jquery-1.7.min.js"></script>
	<script language="javascript" src="js/jquery-ui-1.8.16.custom.min.js"></script>
	<script language="javascript" src="js/utils.js"></script>
	<script language="javascript">

		"use strict";
//http://developer.apple.com/library/safari/#documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/ControllingMediaWithJavaScript/ControllingMediaWithJavaScript.html
		var hasNativeAudio,
			errorDescription = {
				errorCode : function(code){
					var des = ["N/A", "MEDIA_ERR_ABORTED", "MEDIA_ERR_NETWORK", "MEDIA_ERR_DECODE", "MEDIA_ERR_SRC_NOT_SUPPORTED"]
					return des[code];
				},
				networkCode: function(code){
					var des = ["NETWORK_EMPTY", "NETWORK_IDLE", "NETWORK_LOADING", "NETWORK_LOADED", "NETWORK_NO_SOURCE"]
					return des[code];
				},
				readyStateCode: function(code){
					var des = ["HAVE_NOTHING", "HAVE_METADATA", "HAVE_CURRENT_DATA", "HAVE_FUTURE_DATA", "HAVE_ENOUGH_DATA"]
					return des[code];
				}
			},
			pageLoaded = false,
			audioPlayer,
			audiofile,
			NEXT_ATTEMPT_WAIT = 100,
			audioEndedEventFired,
			userSelectedAudio,

			initialized = false,
			deferred = { func: undefined, param: undefined },
			loading = false,
			labelPlayBtn,
			labelPauseBtn,
			waitForFlash;
		try{
			hasNativeAudio = (new Audio()) != undefined && (!$.browser.mozilla || $.browser.mozilla && Object.hasOwnProperty.call(window, "ActiveXObject")); 	
			//firefox doesn't handle mp3's under its audio control
		} 
		catch(e){ 
			hasNativeAudio = false 
		} 
 		console.log("AUDIO: hasNativeAudio = " + hasNativeAudio); 

		function onPageLoad(){
    	    pageLoaded = true;
		}  
		function audioError(errMessage){
			if (hasNativeAudio && parent.nav!=undefined){
				//codes reference:
//http://developer.apple.com/library/safari/#documentation/AudioVideo/Reference/HTMLMediaElementClassReference/HTMLMediaElement/HTMLMediaElement.html#//apple_ref/javascript/cl/HTMLMediaElement
				var str = "Audio status codes: error("+(audioPlayer.error==null?null:audioPlayer.error.code)+")="  + errorDescription.errorCode( (audioPlayer.error==null?0:audioPlayer.error.code) )
					+ ", networkState("+audioPlayer.networkState+")=" + errorDescription.networkCode( audioPlayer.networkState )
					+ ", readyState("+audioPlayer.readyState+")=" + errorDescription.readyStateCode( audioPlayer.readyState) 
					+ ", paused=" + audioPlayer.paused 
					+ ", ended=" + audioPlayer.ended 
					+ ", duration=" + audioPlayer.duration
		            + ", filename=" + audiofile
        		    + ", frame=" + window.name;
				parent.nav.writeToLog(str);
			}
			if (!hasNativeAudio && parent.nav!=undefined){
				parent.nav.writeToLog("audioPlayer.swf: " + errMessage);
			}
		}
		function audioEnded(){
		 	displayPauseIcon(false);
			//parent.nav.writeToLog("Audio: audio ended.", true);
			if (!audioEndedEventFired){ //make sure only happens once
				if (parent.nav!=undefined) parent.nav.eventCompleted("audio");
				audioEndedEventFired = true;
				fireAudioEvent("audioEnded", null); //this function may die abruptly in IE8. it must be last
			}	
		}
		function onAllowToNavigate(nav){ //enable next when gated
		}
		function flashInitialized() {
		    //this function is called by flash once the 1st frame has loaded
		    if (parent.nav!=undefined) parent.nav.writeToLog("audioPlayer: flash initialized.");
		    init();
		}
 
		function onUpdateUI(nav) {
		    var audioFile = nav.getPage().sound;
			labelPlayBtn = parent.nav.settings.labelPlay || "Play";
			labelPauseBtn = parent.nav.settings.labelPause || "Pause";
			if (parent.name == "subCourse") {
				labelPlayBtn = parent.parent.nav.settings.labelPlay || "Play";
				labelPauseBtn = parent.parent.nav.settings.labelPause || "Pause";
			}
		    if (userSelectedAudio==undefined) userSelectedAudio = function () {
		        var ret = true;
		        if (parent.userSelectedAudio == undefined) {
		            if (parent.parent.userSelectedAudio != undefined) {
		                ret = parent.parent.userSelectedAudio;
		            }
		        } else {
		            ret = parent.userSelectedAudio;
		        }
		        return ret;
		    }();
		    if (initialized) {
        		playMP3File(audioFile);
				$('#icon_playpause').attr('title', 'PAUSE');
				$('#buttonLabel').html('PAUSE');
		    } else {
		        if (userSelectedAudio) {
        		    if (hasNativeAudio) {
                		init();
		                playMP3File(audioFile);
        		    } else {
		                if (audioFile == undefined || audioFile.length == 0) {
        		            hideControls(true);
                		    nav.eventCompleted("audio");
		                } else {
			                deferred.func = playMP3File;
	    		            deferred.param = audioFile;
	            		    waitForFlash = setTimeout(function () {
	                    		if (waitForFlash!=undefined){
			                        alert("The Flash audio player failed to initialize in 10 secs. Please make sure you have Flash installed and the Add-On is enabled.");
	                    }
	    		            }, 10000);//wait 10 seconds
						}
		            }
		        } else {
					// Learner chose no audio
					parent.nav.eventCompleted("audio");
				}
		    }	
		}

		//**********************************************
		// event-related methods 
		// TO DO: it can only handle 1 listener
		//**********************************************
		//var evtListeners = new Array();
		
		var evtListener;
		function addAudioEventListener(doc){
			//called from parent
			evtListener = doc;
		}
		function fireAudioEvent(name, value){
			if (evtListener==undefined) return;
			var functionName;
			switch (name){
				case "currentTime":
					functionName = "onAudioCurrentTime";
					break;
				case "audioEnded":
					functionName = "onAudioEnded";
					break;
				default:
					return;	
			}
			//call method
			if (typeof(evtListener[functionName])=="function")	{
				//call must be asynchronous
					setTimeout(function () {
					if (typeof(evtListener[functionName])!="undefined") evtListener[functionName](value);
				}, 100);
			}
			else{
				//parent.nav.writeToLog("Audio warning: function " + functionName + " not found in listener.");
			}
		}
		function loadedMetadata(){
            if (isNaN(audioPlayer.duration)) {
                $("#waiting").show();
                setTimeout(function () {
                    playMP3File(audiofile)
                }, NEXT_ATTEMPT_WAIT);
            }
            else {
                $('#waiting').hide();
                var p = audioPlayer.play();
                if (p !== undefined) {
                    p.then(function (res) {
                        // autoplay Ok
                    }).catch(function (err) {
                        // autoplay was blocked.
                        displayPauseIcon(false);
                        parent.nav.writeToLog("Audio: " + err.message, true);
                        parent.showAudioReminder();
                    });
                }
            }
		}
 		function playMP3File(file) {
		    if (userSelectedAudio == false) return;
			audioEndedEventFired = false;
			audiofile = file;
			if (parent.nav != undefined) {
//	    		parent.nav.writeToLog("Audio: page audio=\"" + file + "\" (native=" + hasNativeAudio + ") in frame " + this.name);
			}
			if (file == undefined || file.length == 0) {
			    hideControls(true);
				displayPauseIcon(false);
				if (hasNativeAudio){ //webkit
					if (!isNaN(audioPlayer.duration)) {
						audioPlayer.pause(); //required to stop the audio
						audioPlayer.src = "";
						audioPlayer.load();
					}
				} else { //flash
				    if (audioPlayer!=undefined) audioPlayer.audioPause();
					audioPlayer.loadFile("");
				}
				parent.nav.eventCompleted("audio");
			} 
			else {
			    hideControls(false);
				if (hasNativeAudio){
					audioPlayer.src = file;
					if (Utilities.isiPad) {
						audioPlayer.load();
					}
					loading = true;
				}
				else {
				    if (initialized) {
	    		        var state;
	            		try{
			                state = audioPlayer.getPlayingState();
	    		        }
	            		catch (e) {
			                //firefox needs more time.. sometimes
	    		            setTimeout(function () {
	            		        playMP3File(file);
			                }, 500); //wait half a second
	    		            return;
	            		}
			            if (state == 'noaudio') {
				            parent.nav.writeToLog("Audio: flash is unable to play audio in this computer");
		        		    hideControls(true);
							$('#icon_playpause').css('background','url(interface/pixel.gif) no-repeat');
				            loading = false;
				            parent.nav.eventCompleted("audio");
				            return; //skip loading.gif
		        		} else {
				            audioPlayer.loadFile(file);
				            loading = true;
		        		}
				    }
				    else {
		        		deferred.func = playMP3File;
				        deferred.param = file;
						loading = true;
				    }
				}
				$('#icon_playpause').css('background','url(interface/audio_loading.gif)');
			}	
		}
 
		function showError(){
			if (hasNativeAudio){
				alert(audioPlayer.readyState  + ":" + audioPlayer.networkState + ":" + ((audioPlayer.error==null)?"null":audioPlayer.error.code) ); 
			} else {
				//alert(audioPlayer.getState() + ":" + audioPlayer.obj.IsPlaying() + ":" + audioPlayer.obj.PercentLoaded() + ":" + audioPlayer.obj.TotalFrames() + ":" + audioPlayer.obj.TCurrentFrame());
				//audioPlayer.obj.TCurrentFrame()
				//alert(audioPlayer.obj.readyState);
				//alert(audioPlayer.getState() + ":" + audioPlayer.obj.IsPlaying() + ":" + audioPlayer.obj.TotalFrames + ":" + audioPlayer.obj.TCurrentFrame("/") );
			}
		}
  
		function init(){
		    //this initialization must be done after the iframe has become visible
		    clearTimeout(waitForFlash); waitForFlash = undefined;
		    if (initialized) return;
			if (hasNativeAudio){
				//http://www.chipwreck.de/blog/2010/03/01/html-5-video-dom-attributes-and-events/
				audioPlayer = document.getElementById("audioHtml5");
				audioPlayer.autoplay = true;
				audioPlayer.volume = 0.5; //50% volume default
				audioPlayer.preload = "metadata";
				audioPlayer.addEventListener("ended", audioEnded, false); //required even though it's already set in tag.. buggy behaviour
				//audioPlayer.addEventListener("timeupdate", updatePositionEvent, false);
			    //audioPlayer.addEventListener("error", audioError, true);
			}
			else{
			    audioPlayer = Utilities.getFlashMovieObject('audioFlash');
				audioPlayer.registerEvent('onPercentage', 'updateFlashPercentage');
				audioPlayer.registerEvent('onSongOver', 'audioEnded');
				audioPlayer.registerEvent('onError', 'audioError');
				audioPlayer.setVolume(50); //50% volume default
			}
			initialized = true;
			if (typeof (deferred.func) == "function" && deferred.param!=undefined) {
			    deferred.func(deferred.param);
			}
		}
		function updateFlashPercentage(p){
			//called by the flash player as the audio head moves
		    //playing the audio. (integer percentage )
		    if (isNaN(p)) return;
		    updatePositionEvent(p / 100);
		}
		function updateTimeLeft() {
		    var secsLeft,
        		str = "";
		    if (hasNativeAudio) {
        		secsLeft = audioPlayer.duration - audioPlayer.currentTime;
		    } else {
		        secsLeft = audioPlayer.getDuration() - audioPlayer.getPosition();
		    }
		    if (!isNaN(secsLeft)) {
        		secsLeft = Math.abs(secsLeft);
		        var minutes = parseInt(secsLeft / 60) % 60,
        		    seconds = Math.round(secsLeft % 60);
		        str = (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds);
		    }
		    $("#timeLeft").html(str);
		}
		function updatePositionEvent(r) {
		    //required by scrubber and for sequencer messages of audio position
		    if (loading) {
        		loading = false;
					$('#icon_playpause').css('background','url(interface/audio_pause.png) no-repeat');
					$('#icon_playpause').attr('title',labelPauseBtn);
		    }
			var audioRatio,
				currentTime;

			updateTimeLeft();
			if (hasNativeAudio) { //webkit, etc
				audioRatio = audioPlayer.currentTime / audioPlayer.duration;
				currentTime = audioPlayer.currentTime;
			}
			else {
				audioRatio = r; //flash returns a percetage ratio
				currentTime = audioPlayer.getPosition(); //in seconds
			}
			fireAudioEvent("currentTime", currentTime);
		}
 
		function togglePlayPause(){
			//called by user when play/pause button is pressed
			if (hasNativeAudio){
				if (audioPlayer.paused || audioPlayer.ended){
					parent.nav.writeToLog("play() toggle");
					if(typeof parent.pauseMedia === "function") parent.pauseMedia(); // Pause other media like video - Finish solution
					audioPlayer.play();
					displayPauseIcon(true);
				}
				else{
					parent.nav.writeToLog("pause() toggle");
					audioPlayer.pause();
					displayPauseIcon(false);
				}
			}
			else{
			    if (audioPlayer.getPlayingState() == 'playing') {
			        audioPlayer.audioPause();
					displayPauseIcon(false);
				} else { //it's paused, don't show pause icon
					if(typeof parent.pauseMedia === "function") parent.pauseMedia(); // Pause other media like video - Finish solution
			        audioPlayer.audioPlay();
					displayPauseIcon(true);
				}
			}
		}
		function displayPauseIcon(flag){
			if (flag === true) {
				$('#icon_playpause').attr('title',labelPauseBtn);
				$('#buttonLabel').html('PAUSE');
				$('#icon_playpause').css('background','url(interface/audio_pause.png) no-repeat');
			} else {
				$('#icon_playpause').attr('title',labelPlayBtn);
				$('#buttonLabel').html('PLAY');
				$('#icon_playpause').css('background','url(interface/audio_play.png) no-repeat');
			}
		}
		function audioPlay(){ //called by parent
			//play only if paused and audio has not ended
		    //console.log(window.parent.name + " = > "+audioPlayer.paused+":"+audioPlayer.ended+":"+audioPlayer.duration+":"+audioPlayer.currentTime + ":> " + audioEndedEventFired);
		    if (userSelectedAudio == true) {
		        displayPauseIcon(true);
		        if (hasNativeAudio) {
        		    //audioPlayer.ended==false is buggy in the iPad
		            if (audioPlayer.paused == true && !audioEndedEventFired) {
						displayPauseIcon(true);
						audioPlayer.play();
					}
		        } else {
		            if (audioPlayer.getPlayingState() == "paused") {
						displayPauseIcon(true);
						audioPlayer.audioPlay();
					}
		        }
		    }
		}
		function audioPause() {//called by parent
		    if (userSelectedAudio) {
		        parent.nav.writeToLog("Audio: pausing invoked in html frame=\"" + window.name + "\"");
				displayPauseIcon(false);				
        		if (hasNativeAudio) {
		            audioPlayer.pause();
		        } else {
					if (!initialized) return;
        		    if (audioPlayer.getPlayingState() == "playing") {
						audioPlayer.audioPause();
					}
		        }
		    }
		}
		function hideControls(flag) {
		    if (flag) {
				$('#playPauseBtn').hide();
		        $('#timeLeft').hide();
		    } else {
		        $('#playPauseBtn').show();
		        $('#timeLeft').show();
		    }
		}
		window.onbeforeunload = function () {
		    //IE bug fix to Flash function
		    this.__flash__removeCallback = function (instance, name) {
		        if (instance == null) return;
		        instance[name] = null;
		    }
		}
	</script>
        
</head>
<body onload="javascript:onPageLoad();">
	<div id="playPauseBtn">
    	<a href="javascript:togglePlayPause()">
			<div id="icon_playpause"></div>
<!--			<span id="buttonLabel"></span>-->
		</a>
	</div>
	<audio id="audioHtml5" name="audio" preload="metadata" onerror="audioError()" onLoadedMetadata="loadedMetadata()" onEnded="audioEnded()" onTimeUpdate="updatePositionEvent()" type="audio/mpeg"></audio>
	<img id="waiting" style="position:absolute; left: 208px; top: 8px; display:none;" src="interface/waitanimation.gif" width="30" height="30" />
	<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" id="audioFlash" width="1" height="1"> 
		<param name="movie" value="flash/audioPlayer.swf"/> 
		<param name="quality" value="high"/> 
		<param name="play" value="false"/> 
		<param name="bgcolor" value="#FFFFFF"/> 
		<param name="allowScriptAccess" value="always" />
		<embed play="false" swliveconnect="true" name="audioFlash" src="flash/audioPlayer.swf" quality="high" bgcolor="#FFFFFF"   
 width="1" height="1" type="application/x-shockwave-flash" allowScriptAccess="always"></embed> 
	</object > 
	<div id="timeLeft"></div>
</body>
</html>